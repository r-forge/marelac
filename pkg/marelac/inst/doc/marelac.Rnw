\documentclass[article,nojss]{jss}
\DeclareGraphicsExtensions{.pdf,.eps}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Add-on packages and fonts
\usepackage{graphicx}
\usepackage{amsmath}


\newcommand{\noun}[1]{\textsc{#1}}
%% Bold symbol macro for standard LaTeX users
\providecommand{\boldsymbol}[1]{\mbox{\boldmath $#1$}}

%% Because html converters don't know tabularnewline
\providecommand{\tabularnewline}{\\}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\newcommand{\m}{\textbf{\textsf{marelac }}}
\newcommand{\R}{\proglang{R}}
\title{
  \m: utilities for the MArine, Riverine, Estuarine,
  LAcustrine and Coastal sciences
}
\Plaintitle{marelac}

\Keywords{
  marine, riverine, estuarine, lacustrine, coastal science, utilities,
  constants, \proglang{R}
}

\Plainkeywords{
  marine, riverine, estuarine, lacustrine, coastal science, utilities,
  constants, R
}


\author{Karline Soetaert\\
NIOO-CEME\\
The Netherlands
\And
Thomas Petzoldt\\
Technische Universit\"at Dresden\\
Germany
\And
Filip Meysman\\
NIOO-CEME\\
The Netherlands
}

\Plainauthor{Karline Soetaert, Thomas Petzoldt and Filip Meysman}

\Abstract{
  \R package \m \citep{marelac} contains chemical and physical constants
  and functions, datasets, routines for unit conversion, and other
  utilities useful for
  MArine, Riverine, Estuarine, LAcustrine and Coastal sciences.
}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  Karline Soetaert\\
  Centre for Estuarine and Marine Ecology (CEME)\\
  Netherlands Institute of Ecology (NIOO)\\
  4401 NT Yerseke, Netherlands\\
  E-mail: \email{k.soetaert@nioo.knaw.nl}\\
  URL: \url{http://www.nioo.knaw.nl/ppages/ksoetaert}\\
  \\
  Thomas Petzoldt\\
  Institut f\"ur Hydrobiologie\\
  Technische Universit\"at Dresden\\
  01062 Dresden, Germany\\
  E-mail: \email{thomas.petzoldt@tu-dresden.de}\\
  URL: \url{http://tu-dresden.de/Members/thomas.petzoldt/}\\
  \\
  Filip Meysman\\
  Centre for Estuarine and Marine Ecology (CEME)\\
  Netherlands Institute of Ecology (NIOO)\\
  4401 NT Yerseke, Netherlands\\
  E-mail: \email{f.meysman@nioo.knaw.nl}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% R/Sweave specific LaTeX commands.
%% need no \usepackage{Sweave}
%\VignetteIndexEntry{marelac: utilities for the MArine, Riverine, Estuarine, LAcustrine and Coastal sciences}
%\VignetteKeywords{marine, riverine, estuarine, lacustrine, coastal science, utilities, constants}
%\VignettePackage{marelac}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Begin of the document
\begin{document}
\SweaveOpts{engine=R,eps=FALSE}
\SweaveOpts{keep.source=TRUE}

<<preliminaries,echo=FALSE,results=hide>>=
library("marelac")
options(prompt = "> ")
options(width=75)
@

\maketitle

\section{Introduction}
  \R-package \m has been designed as a tool for use by scientists working in the
  MArine, Riverine, Estuarine, LAcustrine and Coastal sciences.

  It contains:
  \begin{itemize}
    \item chemical and physical constants, e.g. atomic weights, gas constants.
    \item conversion factors, e.g. gram to mol to liter conversions;
      conversions between different barometric units, temperature units,
      salinity units.
    \item physical functions, e.g. to estimate concentrations of conservative
      substances as a function of salinity, gas transfer coefficients,
      diffusion coefficients, estimating the coriolis force, gravity ...
    \item the thermophysical properties of the seawater, as from the UNESCO
      polynomial \citep{UNESCO} or as from the more recent derivation based on
      a gibbs funtion \citep{Feistel08}, \citep{McDougall}.
   \end{itemize}

\section{Constants and datasets}
  \subsection{Physical constants}
  Dataset \code{Constants} contains commonly used physical and chemical
  constants, as in \citep{Mohr05}:
<<>>=
data.frame(cbind(acronym=names(Constants),
             matrix(ncol=3,byrow=TRUE,data=unlist(Constants),
             dimnames=list(NULL,c("value","units","description")))))

@
  \subsection{Ocean characteristics}
  Dataset \code{Oceans} contains surfaces and volumes of the world ocean
  as in \citep{Sarmiento06}:
<<>>=
data.frame(cbind(acronym=names(Oceans),
             matrix(ncol=3,byrow=TRUE,data=unlist(Oceans),
             dimnames=list(NULL,c("value","units","description")))))
@
  \subsection{World bathymetric data}
  data set \code{Bathymetry} from the \pkg{marelac} package
  can be used to generate the bathymetry (and hypsometry) of the world oceans
  (and land):
<<label=bat,include=FALSE>>=
require(marelac)
image(Bathymetry$x,Bathymetry$y,Bathymetry$z,col=femmecol(100),
      asp=TRUE,xlab="",ylab="")
contour(Bathymetry$x,Bathymetry$y,Bathymetry$z,add=TRUE)
@
\setkeys{Gin}{width=0.8\textwidth}
\begin{figure}
\begin{center}
<<label=batfig,fig=TRUE,echo=FALSE>>=
<<bat>>
@
\end{center}
\caption{Image plot of ocean bathymetry - see text for R-code}
\label{fig:f1}
\end{figure}
  \subsection{Surface of 1 dg by 1 dg grid cells of the earth}
  Function \code{earth_surf} estimates the surface ($m^2$) of the
  bathymetric grid cells of 1dg by 1d, based on their latitude.

  We use it to estimate the surface of the earth; the true surface
  is  510072000 $km^2$
<<>>=
SURF <- outer(X=Bathymetry$x,
               Y=Bathymetry$y,
               FUN <- function(X,Y) earth_surf(Y,X))
sum(SURF)
@
Similarly, we can estimate the surface and volume of the oceans; it should
be $3.58e^{14}$ and $1.34e^{+18}$ respectively.

<<>>=
 sum(SURF*(Bathymetry$z<0))

- sum(SURF*Bathymetry$z*(Bathymetry$z<0))
@
  Combined with the dataset \code{Bathymetry}, function \code{earth_surf}
  allows to estimate the total earth surface at certain water depths
<<>>=
SurfDepth <- vector()

dseq <- seq(-7500,-250,by=250)

for (i in 2:length(dseq)) {
  ii <- which (Bathymetry$z>dseq[i-1]&Bathymetry$z<=dseq[i])
  SurfDepth[i-1]<-sum(SURF[ii])
}
@
<<label=ocean,include=FALSE>>=
plot(dseq[-1],SurfDepth, xlab="depth, m", log="y",
     ylab = "m2", main = "Surface at ocean depths")
@
\setkeys{Gin}{width=0.4\textwidth}
\begin{figure}
\begin{center}
<<label=ocean,fig=TRUE,echo=FALSE>>=
<<ocean>>
@
\end{center}
\caption{Earth surface at certain ocean depths - see text for R-code}
\label{fig:fo}
\end{figure}


  \subsection{AtomicWeight}
  Dataset \code{AtomicWeight} holds the atomic weight of various chemical
  elements, as in \citep{Wieser06}; The data set contains \code{NA} for elements
  which have no stable isotopes (except U, Th, Pa). The data set can
  be called in two versions. \code{AtomicWeight} shows the full table
  and \code{atomicweight} can be used for symbolic computations with
  the elements.
<<>>=
AtomicWeight
AtomicWeight[8,]
(W_H2O<- with (atomicweight, 2 * H + O))
@
  \subsection{atmospheric composition}
  The atmospheric composition, given in units of the moles of each gas to the
  total of moles of gas in dry air is in function \code{atmComp}:
<<>>=
atmComp("O2")
atmComp()
sum(atmComp())    #!
@


\section{physical functions}
  \subsection{coriolis}
  Function \code{coriolis} estimates the coriolis factor, f, units $sec^{-1}$
  according to the formula: $f=2*\omega*\sin(lat)$, where
  $\omega=7.292e^{-5} radians sec^{-1}$

<<label=cor,include=FALSE>>=
plot(-90:90,coriolis(-90:90),xlab="latitude, dg North",
                 ylab= "/s" , main ="coriolis factor",type="l",lwd=2)
@
\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}
\centering
<<label=figcor,fig=TRUE,echo=FALSE>>=
<<cor>>
@
\caption{The coriolis function}
\label{fig:cor}
\end{figure}

  \subsection{molecular diffusion coefficients}
  In function \code{diffcoeff} the molecular and ionic diffusion coefficients
  ($m^2 s^{-1}$), for several species at given salinity (S) temperature (t)
  and pressure (P) is estimated. The implementation is based on the code
  "CANDI" by Bernie Boudreau \citep{Boudreau96}.
<<>>=
diffcoeff(S=15,t=15)*24*3600*1e4  # cm2/day
diffcoeff(t=10)$O2
difftemp <- diffcoeff(t=0:30)[,1:13]
diffsal <- diffcoeff(S=0:35)[,1:13]
@
<<label=diff,include=FALSE>>=
matplot(0:30,difftemp,xlab="temperature",ylab=" m2/sec",
        main="Molecular/ionic diffusion",type="l")
legend("topleft",ncol=2,cex=0.8,title="mean",col=1:13,lty=1:13,
        legend=cbind(names(difftemp),format(colMeans(difftemp),digits=4)))
@
\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}
\centering
<<label=figdif,fig=TRUE,echo=FALSE>>=
<<diff>>
@
\caption{molecular diffusion coefficients as a function of temperature}
\label{fig:diff}
\end{figure}

  \subsection{shear viscosity of water}
  \code{viscosity} calculates the shear viscosity of water, in centipoise
  ($g m^{-1} sec^{-1}$). Valid for 0<t<30 and 0<S<36.

<<label=visc,include=FALSE>>=
plot(0:30,viscosity(S=35,t=0:30,P=1),xlab="temperature",ylab="g/m/s",
       main="shear viscosity of water",type="l")
lines(0:30,viscosity(S=0,t=0:30,P=1),col="red")
lines(0:30,viscosity(S=35,t=0:30,P=100),col="blue")
legend("topright",col=c("black","red","blue"),lty=1,
        legend=c("S=35,P=1","S=0,P=1","S=35,P=100"))
@
\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}
\centering
<<label=figshear,fig=TRUE,echo=FALSE>>=
<<visc>>
@
\caption{shear viscosity of water as a function of temperature}
\label{fig:diff}
\end{figure}

\section{dissolved gasses}

  \subsection{saturated oxygen concentrations}
  \code{gas_O2sat} estimates the saturated concentration of oxygen:
<<>>=
gas_O2sat(t = 20)
t <- seq(0, 30, 0.1)
@
<<label=o2sat,include=FALSE>>=
  plot(t, gas_O2sat(t = t), type = "l", ylim = c(0, 15), lwd=2,
       main="Oxygen saturation", ylab = "mg/l", xlab="temperature")
  lines(t, gas_O2sat(S = 0, t = t, method = "Weiss"), col = "green",
        lwd = 2, lty = "dashed")
  lines(t, gas_O2sat(S = 35, t = t, method = "Weiss"), col = "red", lwd = 2)
  legend("topright",c("S=35","S=0"),col=c("red","green"), lty=c(1,2), lwd=2)
@
\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}
\centering
<<label=figo2sat,fig=TRUE,echo=FALSE>>=
<<o2sat>>
@
\caption{Oxygen saturated concentration as a function of temperature, and
  for different salinities}
\label{fig:o2sat}
\end{figure}

  \subsection{solubilities and saturated concentrations}
  More solubilities and saturated concentrations are in functions
  \code{gas_solubility} and \code{gas_satconc}.
<<>>=
gas_satconc(species="O2")
Temp<-seq(from=0,to=30,by=0.1)
Sal <- seq(from=0,to=35,by=0.1)
@
<<label=solub,include=FALSE>>=
#
mf  <-par(mfrow=c(2,2))
#
gs  <-gas_solubility(t=Temp)
species   <- c("CCl4","CO2","N2O","Rn","CCl2F2")
matplot(Temp,gs[,species],type="l",lty=1,lwd=2,xlab="temperature",
     ylab="mmol/m3",main="solubility (S=35)")
legend("topright",col=1:5,lwd=2,legend=species)
#
species2 <- c("Kr","CH4","Ar","O2","N2","Ne")
matplot(Temp,gs[,species2],type="l",lty=1,lwd=2,xlab="temperature",
     ylab="mmol/m3",main="solubility (S=35)")
legend("topright",col=1:6,lwd=2,legend=species2)
#

species <- c("N2","CO2","O2","CH4","N2O")
gsat  <-gas_satconc(t=Temp,species=species)
matplot(Temp,gsat,type="l",xlab="temperature",log="y", lty=1,
     ylab="mmol/m3",main="Saturated conc (S=35)",lwd=2)
legend("right",col=1:5,lwd=2,legend=species)
#
gsat  <-gas_satconc(S=Sal,species=species)
matplot(Sal,gsat,type="l",xlab="salinity",log="y", lty=1,
     ylab="mmol/m3",main="Saturated conc (T=20)",lwd=2)
legend("right",col=1:5,lwd=2,legend=species)
#
par("mfrow"=mf)
@
\setkeys{Gin}{width=0.8\textwidth}
\begin{figure}
\centering
<<label=figsolub,fig=TRUE,echo=FALSE>>=
<<solub>>
@
\caption{Saturated concentrations and solubility as a function of temperature
  and salinity, and for different species}
\label{fig:solub}
\end{figure}

\subsection{partial pressure of water vapor}
  \code{vapor} estimates the partial pessure of water vapor, divided by the
  atmospheric pressure.
<<label=vapor,include=FALSE>>=
plot(0:30, vapor(t = 0:30), xlab = "Temperature, dgC", ylab = "pH2O/P",
     type ="l")
@
\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}
\centering
<<label=figvapor,fig=TRUE,echo=FALSE>>=
<<vapor>>
@
\caption{partial pressure of water in saturated air as a function of
  temperature}
\label{fig:vapor}
\end{figure}

\subsection{Schmidt number and gas transfer velocity}
  The Schmidt number of a gas (\code{gas_schmidt}) is an essential quantity
  in the gas transfer velocity calculation (\code{gas_transfer}). The latter
  also depends on wind velocity (as measured 10 metres above sealevel).
<<>>=
gas_schmidt(species="CO2",t=20)

useq <- 0:15
@
<<label=transfer,include=FALSE>>=
plot(useq,gas_transfer(u10=useq,species="O2"),type="l",lwd=2,xlab="u10,m/s",
     ylab="m/s", main="O2 gas transfer velocity",ylim=c(0,3e-4))
lines(useq,gas_transfer(u10=useq,species="O2",method="Nightingale"),lwd=2,lty=2)
lines(useq,gas_transfer(u10=useq,species="O2",method="Wanninkhof1"),lwd=2,lty=3)
lines(useq,gas_transfer(u10=useq,species="O2",method="Wanninkhof2"),lwd=2,lty=4)

legend("topleft",lty=1:4,lwd=2,legend=c("Liss and Merlivat 1986",
"Nightingale et al. 2000","Wanninkhof 1992","Wanninkhof and McGills 1999"))
@
\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}
\centering
<<label=figtransfer,fig=TRUE,echo=FALSE>>=
<<transfer>>
@
\caption{gas transfer velocity for seawater}
\label{fig:transfer}
\end{figure}

\section{seawater properties}
\subsection{Concentration of conservative species in seawater}
  Borate, calcite, sulphate and fluoride concentrations can be estimated as
  a function of the seawater salinity:
<<>>=
sw_conserv(S=seq(0,35,by=5))
@
\subsection{Two salinity scales}
  \citep{Millero08} and \citep{McDougall09}
  provide a function to derive absolute salinity (expressed
  in $g~kg^{-1}$) from measures of practical salinity. Absolute salinity is
  to be used as the concentration variable entering the thermodynamic functions
  of seawater (see next section).

  The conversion between salinity scales is done with functions
  \begin{itemize}
    \item \code{convert_AStoPS} from absolute to practical salinity and
    \item \code{convert_PStoAS} from practical to absolute salinity
  \end{itemize}
  For example:
<<>>=
convert_AStoPS(S=35)
convert_PStoAS(S=35)
@

  These functions have as extra arguments the gauge pressure (\code{p}),
  latitude (\code{lat}) and longitude (\code{lon}), and -optional- the
  dissolved Si concentration (\code{DSi}) and the ocean (\code{Ocean}).

  When one of these arguments are provided, they also
  correct for inconsistencies due to local composition anomalies.

  When \code{DSi} is not given, the correction makes use of a conversion table
  that estimates the salinity variations as a function of present-day local
  seawater composition. The conversion in \R uses the FORTRAN code developed
  by D. Jackett (\url{http://www.marine.csiro.au/\~jackett/TEOS-10/}).

  The correction factors are in a data set called \code{sw_sfac}, a list with
  the properties used in the conversion functions.

  Below we first convert from practical to
  absolute salinity, for different longitudes, and then plot the correction
  factors as a function of latitude and longitude and at the seawater surface
  (i.e. for \code{p=0}).

  \footnote{Before plotting, the negative numbers in the salinity anomaly
  table \code{sw\_sfac} are converted to \code{NA} (not available).
  In the data set, numbers not available are denoted with \code{-99}.}

<<>>=
convert_PStoAS(S=35,lat=-10,lon=0)
convert_PStoAS(S=35,lat=0,lon=0)
convert_PStoAS(S=35,lat=10,lon=0)
convert_PStoAS(S=35,lat=-10,lon=0)

convert_PStoAS(S=35,lat=-10, DSi=1:10, Ocean="Pacific")

dsal <- t(sw_sfac$del_sa[1,,])
dsal [dsal < -90]<-NA
@
<<label=sfac,include=FALSE>>=
image(sw_sfac$longs, sw_sfac$lats, dsal, col=femmecol(100),
      asp=TRUE, xlab="dg", ylab="dg",
      main="salinity conversion - p = 0 bar")
contour(sw_sfac$longs, sw_sfac$lats, dsal, asp=TRUE, add=TRUE)
@
\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}
\centering
<<label=sfac,fig=TRUE,echo=FALSE>>=
<<sfac>>
@
\caption{salinity anomaly to convert from practical to absolute salinity
and vice versa}
\label{fig:sfac}
\end{figure}


\subsection{Thermophysical seawater properties}
  \m also implements several thermodynamic properties of seawater. Either one
  can choose the formulation based on the UNESCO polynomial \citep{UNESCO},
  which has served the oceanographic community for decades, or the more recent
  derivation as in \citep{Feistel08}. In the latter case the estimates are
  based on three individual thermodynamic potentials for fluid water, for ice
  and for the saline contribution of seawater (the Helmholtz function for
  pure water, an equation of state for salt-free ice, in the form of a Gibbs
  potential function, and the saline part of the Gibbs potential).

  Note that the formulations from \citep{Feistel08} use the absolute salinity
  scale, \citep{Millero08}, while the UNESCO polynomial uses practical salinity.

<<>>=
sw_cp(S=40,t=1:20)
sw_cp(S=40,t=1:20,UNESCO=TRUE)
@
  The precision of the calculations can be assessed by comparing them to
  some test values:

<<>>=
t  <-  25.5
p  <- 1023/10  # pressure in bar
S  <- 35.7
sw_alpha(S,t,p)               -0.0003098378393192645
sw_beta(S,t,p)                -0.0007257297978386655
sw_cp(S,t,p)                  -3974.42541259729
sw_tpot(S,t,p)                -25.2720983155409
sw_dens(S,t,p)                -1027.95249315662
sw_enthalpy(S,t,p)            -110776.712408975
sw_entropy(S,t,p)             -352.81879771528
sw_kappa(S,t,p)               -4.033862685464779e-6
sw_kappa_t(S,t,p)             -4.104037946151349e-6
sw_svel(S,t,p)                -1552.93372863425
@

  Below we plot all implemented thermophysical properties as a function of
  salinity and temperature. We first define a function that does that
<<label=sw,include=FALSE>>=
plotST <- function(fun,title)
{
  Sal <-  seq(0,40,by=0.5)
  Temp<- seq(-5,40,by=0.5)

  Val <- outer(X=Sal,Y=Temp,FUN=function(X,Y) fun(S=X, t=Y))
  contour(Sal,Temp,Val,xlab="Salinity",ylab="temperature",
          main=title,nlevel=20)
}

par (mfrow=c(3,2))
par(mar=c(4,4,3,2))
plotST(sw_gibbs,"Gibbs function")
plotST(sw_cp,"Heat capacity")
plotST(sw_entropy,"Entropy")
plotST(sw_enthalpy,"Enthalpy")
plotST(sw_dens,"Density")
plotST(sw_svel,"Sound velocity")

@
\setkeys{Gin}{width=0.9\textwidth}
\begin{figure}
\centering
<<label=sw,fig=TRUE,echo=FALSE>>=
<<sw>>
@
\caption{seawater properties as a function of salinity and temperature -
  see text for R-code}
\label{fig:sw}
\end{figure}

<<label=sw2,include=FALSE>>=
par (mfrow=c(3,2))
par(mar=c(4,4,3,2))
plotST(sw_kappa,"Isentropic compressibility")
plotST(sw_kappa_t,"Isothermal compressibility")
plotST(sw_alpha,"Thermal expansion coefficient")
plotST(sw_beta,"Haline contraction coefficient")
plotST(sw_adtgrad,"Adiabatic temperature gradient")
par (mfrow=c(1,1))
@
\setkeys{Gin}{width=0.9\textwidth}
\begin{figure}
\centering
<<label=sw2,fig=TRUE,echo=FALSE>>=
<<sw2>>
@
\caption{seawater properties as a function of salinity and temperature -
  continued - see text for R-code}
\label{fig:sw2}
\end{figure}

\section{conversions}
Finally, several functions are included to convert between units of certain
properties.

\subsection{gram, mol, liter conversions}
  \m function \code{molweight} converts from gram to moles and vice versa
<<>>=
1/molweight("CO3")
1/molweight("HCO3")
1/molweight(c("C2H5OH", "CO2", "H2O"))

molweight(c("SiOH4", "NaHCO3", "C6H12O6", "Ca(HCO3)2", "Pb(NO3)2", "(NH4)2SO4"))
@
We can use that to estimate the importance of molecular weight on certain
physical properties:

<<>>=
gs <- gas_solubility()
species <- colnames(gs)
mw <- molweight(species)
@
<<label=mwgs,include=FALSE>>=
plot(mw,gs,type="n",xlab="molecular weight", ylab="solubility", log="y")
text(mw,gs,species)
@
\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}
\centering
<<label=mwgs,fig=TRUE,echo=FALSE>>=
<<mwgs>>
@
\caption{Gas solubility as a function of molecular weight
  see text for R-code}
\label{fig:sw}
\end{figure}

  \code{molvol} estimates the volume of one liter of a gas.
  molar volume of an ideal gas
<<>>=
molvol(species="ideal")
molvol(species="ideal",t=1:10)
@
<<>>=
1/molvol(species="O2",t=0)*1000
1/molvol(species="O2",q=1:6,t=0)
1/molvol(t=1:5,species=c("CO2","O2","N2O"))
@

  \subsection{pressure conversions}
  \code{convert_p} converts between the different barometric scales:
<<>>=
convert_p(1, "atm")
@

  \subsection{temperature conversions}
  while \code{convert_T} converts between the different temperature scales
(Kelvin, Celsius, Fahrenheit):
<<>>=
convert_T(1, "C")
@
  \subsection{salinity and chlorinity}
  The relationship between Salinity, chlorinity and conductivity is in various
  functions:
<<>>=
convert_StoCl(S=35)
convert_RtoS(R=1)
convert_StoR(S=35)
@
\section{finally}
This vignette was made with Sweave \citep{Leisch02}.

\clearpage
\bibliography{vignettes}

\end{document}
